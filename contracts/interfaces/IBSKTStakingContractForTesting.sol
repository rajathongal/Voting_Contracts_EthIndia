// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface IBSKTStakingPool {
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event Rewarded(address indexed from, address indexed to, uint256 value);
    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);

    function BSKTASREWARD() external view returns (address);

    function STAKEBSKT() external view returns (address);

    function balanceOf(address account) external view returns (uint256);

    function duration() external view returns (uint256);

    function earned(address account) external view returns (uint256);

    function exit(address tok) external;

    function getReward() external;

    function isOwner() external view returns (bool);

    function lastTimeRewardApplicable() external view returns (uint256);

    function lastUpdateTime() external view returns (uint256);

    function minimumBsktStakingEntry(address) external view returns (bool);

    function notifyRewardRate(uint256 _reward) external;

    function owner() external view returns (address);

    function periodFinish() external view returns (uint256);

    function renounceOwnership() external;

    function rewardPerToken() external view returns (uint256);

    function rewardPerTokenStored() external view returns (uint256);

    function rewardRate() external view returns (uint256);

    function rewards(address) external view returns (uint256);

    function setDuration(uint256 _duration) external;

    function stake(uint256 amount, address tok) external;

    function starttime() external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function transferOwnership(address newOwner) external;

    function userRewardPerTokenPaid(address) external view returns (uint256);

    function withdraw(uint256 amount, address tok) external;
}